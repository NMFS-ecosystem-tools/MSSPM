/** @file BeesStats.h
 * @brief Class definition for the BeesStats structure
 *
 * This file contains the class definition for the BeesStats structure. This
 * structure contains the variables necessary to run an Estimation using the
 * Bees Algorithm.
 */

#ifndef BEESSTATS_H
#define BEESSTATS_H

#include <cmath>
#include <vector>
#include <iostream>

/**
 * @brief Bees Statistics Class
 *
 * This class holds the statistics generated by a run of the Bees algorithm.
 *
 */
class BeesStats
{
private:
    int                               m_totalParameters;
    int                               m_numRuns;
    double                            m_sumFitness;
    double                            m_meanFitness;
    std::vector<double>               m_sumData;
    std::vector<double>               m_fitnessData;
    std::vector<double>               m_meanData;
    std::vector<double>               m_stdDev;
    std::vector<std::vector<double> > m_data;

public:
    BeesStats(const int &totParameters, const int& numRuns);
   ~BeesStats() {}

    /**
     * @brief Loads data into the private data members
     * @param bestFitness : best fitness value to load
     * @param parameters : list of parameter values to load
     */
    void addData(const double& bestFitness,
                 const std::vector<double>& parameters);
    /**
     * @brief Finds the mean fitness value
     * @param fitness : the mean fitness value
     * @param parameters : vector of mean estimated parameter values
     */
    void getMean(double& fitness,
                 std::vector<double>& parameters);
    /**
     * @brief Gets the standard deviation of each of the parameter values
     * @param fitnessStdDev : the fitness standard deviation
     * @param totStdDev : the total standard deviation
     * @param stdDevParameters : the standard deviation of each of the estimated parameters
     */
    void getStdDev(double& fitnessStdDev,
                   double& totStdDev,
                   std::vector<double>& stdDevParameters);

};

#endif
